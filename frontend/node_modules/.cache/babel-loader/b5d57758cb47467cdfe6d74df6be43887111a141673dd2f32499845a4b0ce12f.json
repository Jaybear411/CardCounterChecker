{"ast":null,"code":"import React from'react';import'./BlackjackTable.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BlackjackTable=_ref=>{let{playerHand,dealerHand,gameOver,message}=_ref;// Function to render a playing card\nconst renderCard=card=>{const{value,suit}=card;// Determine card color based on suit\nconst cardColor=suit==='♥'||suit==='♦'?'red':'black';// For face-down card\nif(value==='?'){return/*#__PURE__*/_jsx(\"div\",{className:\"card face-down new-card\",children:/*#__PURE__*/_jsx(\"div\",{className:\"card-back\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:`card ${cardColor} new-card`,children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-value-top\",children:value}),/*#__PURE__*/_jsx(\"div\",{className:\"card-suit\",children:suit}),/*#__PURE__*/_jsx(\"div\",{className:\"card-value-bottom\",children:value})]});};// Calculate hand value\nconst calculateHandValue=hand=>{if(!hand)return 0;let value=0;let aces=0;hand.forEach(card=>{if(card.value==='?')return;if(['J','Q','K'].includes(card.value)){value+=10;}else if(card.value==='A'){value+=11;aces+=1;}else{value+=parseInt(card.value);}});// Adjust for aces if needed\nwhile(value>21&&aces>0){value-=10;aces-=1;}return value;};const playerValue=calculateHandValue(playerHand);const dealerValue=calculateHandValue(dealerHand);return/*#__PURE__*/_jsx(\"div\",{className:\"blackjack-table\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"table-felt\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"dealer-area\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Dealer \",gameOver&&/*#__PURE__*/_jsxs(\"span\",{children:[\"(\",dealerValue,\")\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"hand dealer-hand\",children:dealerHand&&dealerHand.map((card,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"card-container\",children:renderCard(card)},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-area\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Player (\",playerValue,\")\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"hand player-hand\",children:playerHand&&playerHand.map((card,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"card-container\",children:renderCard(card)},index))})]}),message&&/*#__PURE__*/_jsx(\"div\",{className:\"game-message\",children:/*#__PURE__*/_jsx(\"p\",{children:message})})]})});};export default BlackjackTable;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","BlackjackTable","_ref","playerHand","dealerHand","gameOver","message","renderCard","card","value","suit","cardColor","className","children","calculateHandValue","hand","aces","forEach","includes","parseInt","playerValue","dealerValue","map","index"],"sources":["/Users/jaykhemchandani/Desktop/CardCounterChecker/frontend/src/components/BlackjackTable.js"],"sourcesContent":["import React from 'react';\nimport './BlackjackTable.css';\n\nconst BlackjackTable = ({ playerHand, dealerHand, gameOver, message }) => {\n  // Function to render a playing card\n  const renderCard = (card) => {\n    const { value, suit } = card;\n    \n    // Determine card color based on suit\n    const cardColor = suit === '♥' || suit === '♦' ? 'red' : 'black';\n    \n    // For face-down card\n    if (value === '?') {\n      return (\n        <div className=\"card face-down new-card\">\n          <div className=\"card-back\"></div>\n        </div>\n      );\n    }\n    \n    return (\n      <div className={`card ${cardColor} new-card`}>\n        <div className=\"card-value-top\">{value}</div>\n        <div className=\"card-suit\">{suit}</div>\n        <div className=\"card-value-bottom\">{value}</div>\n      </div>\n    );\n  };\n\n  // Calculate hand value\n  const calculateHandValue = (hand) => {\n    if (!hand) return 0;\n    \n    let value = 0;\n    let aces = 0;\n    \n    hand.forEach(card => {\n      if (card.value === '?') return;\n      \n      if (['J', 'Q', 'K'].includes(card.value)) {\n        value += 10;\n      } else if (card.value === 'A') {\n        value += 11;\n        aces += 1;\n      } else {\n        value += parseInt(card.value);\n      }\n    });\n    \n    // Adjust for aces if needed\n    while (value > 21 && aces > 0) {\n      value -= 10;\n      aces -= 1;\n    }\n    \n    return value;\n  };\n\n  const playerValue = calculateHandValue(playerHand);\n  const dealerValue = calculateHandValue(dealerHand);\n  \n  return (\n    <div className=\"blackjack-table\">\n      <div className=\"table-felt\">\n        <div className=\"dealer-area\">\n          <h2>Dealer {gameOver && <span>({dealerValue})</span>}</h2>\n          <div className=\"hand dealer-hand\">\n            {dealerHand && dealerHand.map((card, index) => (\n              <div key={index} className=\"card-container\">\n                {renderCard(card)}\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"player-area\">\n          <h2>Player ({playerValue})</h2>\n          <div className=\"hand player-hand\">\n            {playerHand && playerHand.map((card, index) => (\n              <div key={index} className=\"card-container\">\n                {renderCard(card)}\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {message && (\n          <div className=\"game-message\">\n            <p>{message}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default BlackjackTable; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}